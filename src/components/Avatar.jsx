/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 .\public\models\6707ea0c5563fc497736346c.glb -o .\src\components\Avatar.jsx -r public 
*/

import React, { useEffect, useMemo, useRef, useState } from 'react'
import { useFrame, useGraph, useLoader } from '@react-three/fiber'
import { useAnimations, useFBX, useGLTF } from '@react-three/drei'
import { SkeletonUtils, ThreeMFLoader } from 'three-stdlib'
import {useControls } from 'leva';
import * as THREE from "three";

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

export function Avatar(props) {

  const {playAudio, script} = useControls({
    playAudio: false,
    script: {
      value: "about",
      options: ["about","ego"],
    },
  });

  const audio = useMemo(() => new Audio(`/audios/${script}.mp3`), [script]);
  
 const jsonFile = useLoader(THREE.FileLoader, `audios/${script}.json`);
 const lipsync = JSON.parse(jsonFile);

  useFrame(() => {
    const currentAudioTime = audio.currentTime;

    if(audio.paused || audio.ended){
      setAnimation("Idle");
    }

    Object.values(corresponding).forEach((value) => {
      nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[value] ]= 0;
      nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[value] ]= 0;

    });


    for (let i = 0; i<lipsync.mouthCues.lenght; i++){
      const mouthCue = lipsync.mouthCues[i];
      if(currentAudioTime >= mouthCue.start && currentAudioTime <= mouthCue.end) {
        console.log(mouthCue.value);
          nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCue.value]]]= 1;
          nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[corresponding[mouthCue.value]]]= 1; break;
      }
    }
  });

  useEffect(() => {
    if (playAudio) {
      audio.play();
      if (script === "about") {
        setAnimation("Salute");
      }
      if (script === "ego"){
        setAnimation("Sad");
      }
    }else {
      setAnimation("Idle");
      audio.pause();
    }
  }, [playAudio, script]);




  const { scene } = useGLTF('/models/6707ea0c5563fc497736346c.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)

  const { animations :idleAnimation } = useFBX("animations/Idle.fbx");
  const { animations : angryAnimation} = useFBX("animations/Angry.fbx");
  const { animations : saluteAnimation } = useFBX("animations/Salute.fbx");
  const { animations : sadAnimation } = useFBX("animations/Sad.fbx"); 

  idleAnimation[0].name = "Idle";
  angryAnimation[0].name = "Angry";
  saluteAnimation[0].name = "Salute";
  sadAnimation[0].name = "Sad";

  const [animation, setAnimation] = useState("Idle");

  const group = useRef();

  const { actions} = useAnimations([idleAnimation[0], angryAnimation[0], saluteAnimation[0],sadAnimation[0]], group);

  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();
    return () => actions[animation].fadeOut(0.5);
  }, [animation]);


  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
      <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
      <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
    </group>
  )
}

useGLTF.preload('/models/6707ea0c5563fc497736346c.glb')
